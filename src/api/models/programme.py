# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api.models.base_model_ import Model
from api.models.now_playing_item import NowPlayingItem  # noqa: F401,E501
from api import util


class Programme(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, text: str=None, type: str=None, start_time: datetime=None, end_time: datetime=None, cover_art: str=None, name: str=None, episode_title: str=None):  # noqa: E501
        """Programme - a model defined in Swagger

        :param text: The text of this Programme.  # noqa: E501
        :type text: str
        :param type: The type of this Programme.  # noqa: E501
        :type type: str
        :param start_time: The start_time of this Programme.  # noqa: E501
        :type start_time: datetime
        :param end_time: The end_time of this Programme.  # noqa: E501
        :type end_time: datetime
        :param cover_art: The cover_art of this Programme.  # noqa: E501
        :type cover_art: str
        :param name: The name of this Programme.  # noqa: E501
        :type name: str
        :param episode_title: The episode_title of this Programme.  # noqa: E501
        :type episode_title: str
        """
        self.swagger_types = {
            'text': str,
            'type': str,
            'start_time': datetime,
            'end_time': datetime,
            'cover_art': str,
            'name': str,
            'episode_title': str
        }

        self.attribute_map = {
            'text': 'text',
            'type': 'type',
            'start_time': 'start_time',
            'end_time': 'end_time',
            'cover_art': 'cover_art',
            'name': 'name',
            'episode_title': 'episode_title'
        }
        self._text = text
        self._type = type
        self._start_time = start_time
        self._end_time = end_time
        self._cover_art = cover_art
        self._name = name
        self._episode_title = episode_title

    @classmethod
    def from_dict(cls, dikt) -> 'Programme':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Programme of this Programme.  # noqa: E501
        :rtype: Programme
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self) -> str:
        """Gets the text of this Programme.


        :return: The text of this Programme.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this Programme.


        :param text: The text of this Programme.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def type(self) -> str:
        """Gets the type of this Programme.


        :return: The type of this Programme.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Programme.


        :param type: The type of this Programme.
        :type type: str
        """
        allowed_values = ["song", "programme"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def start_time(self) -> datetime:
        """Gets the start_time of this Programme.


        :return: The start_time of this Programme.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: datetime):
        """Sets the start_time of this Programme.


        :param start_time: The start_time of this Programme.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self) -> datetime:
        """Gets the end_time of this Programme.


        :return: The end_time of this Programme.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: datetime):
        """Sets the end_time of this Programme.


        :param end_time: The end_time of this Programme.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def cover_art(self) -> str:
        """Gets the cover_art of this Programme.


        :return: The cover_art of this Programme.
        :rtype: str
        """
        return self._cover_art

    @cover_art.setter
    def cover_art(self, cover_art: str):
        """Sets the cover_art of this Programme.


        :param cover_art: The cover_art of this Programme.
        :type cover_art: str
        """

        self._cover_art = cover_art

    @property
    def name(self) -> str:
        """Gets the name of this Programme.


        :return: The name of this Programme.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Programme.


        :param name: The name of this Programme.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def episode_title(self) -> str:
        """Gets the episode_title of this Programme.


        :return: The episode_title of this Programme.
        :rtype: str
        """
        return self._episode_title

    @episode_title.setter
    def episode_title(self, episode_title: str):
        """Sets the episode_title of this Programme.


        :param episode_title: The episode_title of this Programme.
        :type episode_title: str
        """

        self._episode_title = episode_title
