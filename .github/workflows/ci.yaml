name: CI

on: 
  push:
    paths-ignore:
      - "README.md"

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox
      # Checks to see if any files in the PR match one of the listed file types.
      # We can use this filter to decide whether or not to run linters or tests.
      # You can check if a file with a listed file type is in the PR by doing:
      # if: ${{ steps.filter.outputs.md == 'true' }}
      # This will return true if there's a markdown file that was changed
      # in the PR.
      - uses: dorny/paths-filter@v2.2.1
        id: filter
        with:
          filters: |
            md:
              - '**/*.md'
            src:
              - 'src/**'
            conf:
              - 'conf/**'
            py:
              - '**/*.py'
            yaml:
              - '**/*.yml'
              - '**/*.yaml'
      - name: Lint with flake8
        uses: TrueBrain/actions-flake8@v2
        with:
          max_line_length: 120
          ignore: E252 # Just because autogenerated code from connexion doesn't generate compliant code...
      - name: Test
        if: ${{ steps.filter.outputs.src == 'true' || steps.filter.outputs.conf == 'true' }}
        run: |
          tox
  gen-app-version:
    name: Generate app version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: gen-version
        run: |
          app_version=$(./gen-app-version.sh)
          echo "App version: $app_version"
          echo "::set-output name=version::$app_version"
    outputs:
      app-version: ${{ steps.gen-version.outputs.version }}
  build-image:
    name: Build docker image
    runs-on: ubuntu-latest
    needs: gen-app-version
    env:
      IMAGE_NAME: jjst/now-playing:${{ needs.gen-app-version.outputs.app-version }}
      DOCKER_BUILDKIT: 1
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build docker image
        run: |
          docker build -t $IMAGE_NAME .
      - name: Test image runs
        run: |
          docker run --rm --name now-playing -d -p 8080:8080 $IMAGE_NAME
          docker top now-playing
      - name: Log in to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        if: github.ref == 'refs/heads/main'
        run: |
          docker push $IMAGE_NAME
  build-redis-image:
    name: Build redis docker image
    runs-on: ubuntu-latest
    needs: gen-app-version
    env:
      IMAGE_NAME: jjst/redis:${{ needs.gen-app-version.outputs.app-version }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build docker image
        run: |
          docker build -t $IMAGE_NAME redis/
      - name: Test image runs
        run: |
          docker run --rm --name test-container -d -p 8080:8080 $IMAGE_NAME
          docker top test-container
      - name: Log in to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        if: github.ref == 'refs/heads/main'
        run: |
          docker push $IMAGE_NAME
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [gen-app-version, build-image]
    steps:
      - uses: actions/checkout@v2
      - name: Generate app spec from template
        env:
          APPLICATION_VERSION: ${{ needs.gen-app-version.outputs.app-version }}
        run: |
          envsubst < ./deploy/app.template.yaml > ./deploy/app.yaml
          echo "Generated deploy file:"
          echo "----------------------"
          cat $DEPLOY_FILE_PATH
      - name: Deploy app
        uses: jjst/action-digitalocean-deploy-app@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

