# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api.models.base_model_ import Model
from api import util

from api.models.now_playing import NowPlaying


class RadioStation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, country_code: str=None, now_playing: NowPlaying=None):  # noqa: E501
        """RadioStation - a model defined in Swagger

        :param id: The id of this RadioStation.  # noqa: E501
        :type id: str
        :param name: The name of this RadioStation.  # noqa: E501
        :type name: str
        :param country_code: The country_code of this RadioStation.  # noqa: E501
        :type country_code: str
        :param now_playing: The now_playing of this RadioStation.  # noqa: E501
        :type now_playing: NowPlaying
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'country_code': str,
            'now_playing': NowPlaying
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'country_code': 'country_code',
            'now_playing': 'now_playing'
        }

        self._id = id
        self._name = name
        self._country_code = country_code
        self._now_playing = now_playing

    @classmethod
    def from_dict(cls, dikt) -> 'RadioStation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RadioStation of this RadioStation.  # noqa: E501
        :rtype: RadioStation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this RadioStation.


        :return: The id of this RadioStation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this RadioStation.


        :param id: The id of this RadioStation.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this RadioStation.


        :return: The name of this RadioStation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this RadioStation.


        :param name: The name of this RadioStation.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def country_code(self) -> str:
        """Gets the country_code of this RadioStation.


        :return: The country_code of this RadioStation.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code: str):
        """Sets the country_code of this RadioStation.


        :param country_code: The country_code of this RadioStation.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501

        self._country_code = country_code

    @property
    def now_playing(self) -> NowPlaying:
        """Gets the now_playing of this RadioStation.


        :return: The now_playing of this RadioStation.
        :rtype: NowPlaying
        """
        return self._now_playing

    @now_playing.setter
    def now_playing(self, now_playing: NowPlaying):
        """Sets the now_playing of this RadioStation.


        :param now_playing: The now_playing of this RadioStation.
        :type now_playing: NowPlaying
        """
        if now_playing is None:
            raise ValueError("Invalid value for `now_playing`, must not be `None`")  # noqa: E501

        self._now_playing = now_playing
